import { db } from '../db';
import { 
  vagaCandidatos, 
  candidatos, 
  vagas, 
  entrevistas,
  pipelineEtapas,
  usuarios,
  empresas
} from '@shared/schema';
import { eq, and } from 'drizzle-orm';
import { whatsappService } from './service';

export class WhatsAppDispatcher {
  
  // Executar a√ß√£o baseada no tipo de a√ß√£o
  async executarAcao(acao: string, candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      switch (acao) {
        case 'confirmar_entrevista':
          return await this.confirmarEntrevista(candidatoId);
        
        case 'remarcar_entrevista':
          return await this.remarcarEntrevista(candidatoId);
        
        case 'falar_com_rh':
          return await this.falarComRH(candidatoId);
        
        case 'solicitar_documentos':
          return await this.solicitarDocumentos(candidatoId);
        
        case 'enviar_link_vaga':
          return await this.enviarLinkVaga(candidatoId);
        
        case 'aprovar_candidato':
          return await this.aprovarCandidato(candidatoId);
        
        case 'reprovar_candidato':
          return await this.reprovarCandidato(candidatoId);
        
        case 'mover_proxima_etapa':
          return await this.moverProximaEtapa(candidatoId);
        
        case 'agendar_entrevista':
          return await this.agendarEntrevista(candidatoId);
        
        default:
          return { success: false, error: `A√ß√£o n√£o reconhecida: ${acao}` };
      }
    } catch (error) {
      console.error('Erro ao executar a√ß√£o:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Confirmar entrevista
  private async confirmarEntrevista(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar entrevista pendente do candidato
      const [entrevista] = await db
        .select()
        .from(entrevistas)
        .where(
          and(
            eq(entrevistas.candidatoId, candidatoId),
            eq(entrevistas.status, 'agendada')
          )
        )
        .orderBy(entrevistas.dataHora);

      if (!entrevista) {
        return { success: false, error: 'Nenhuma entrevista agendada encontrada' };
      }

      // Buscar dados da vaga
      const [vaga] = await db
        .select()
        .from(vagas)
        .where(eq(vagas.id, entrevista.vagaId));

      // Buscar dados do candidato
      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      // Enviar confirma√ß√£o
      const mensagem = `Ol√° ${candidato.nome}! 

Sua confirma√ß√£o de entrevista para a vaga "${vaga.titulo}" foi registrada com sucesso.

üìÖ Data: ${new Date(entrevista.dataHora).toLocaleDateString('pt-BR')}
üïê Hor√°rio: ${new Date(entrevista.dataHora).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}
üìç Local: ${entrevista.local || 'A ser definido'}

Em caso de d√∫vidas, entre em contato conosco.

Obrigado!`;

      // Enviar mensagem (assumindo que temos uma sess√£o padr√£o)
      // Implementar l√≥gica para determinar qual sess√£o usar
      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'entrevista_confirmada'
        });
      }

      // Atualizar status da entrevista
      await db
        .update(entrevistas)
        .set({ 
          status: 'confirmada',
          dataAtualizacao: new Date()
        })
        .where(eq(entrevistas.id, entrevista.id));

      return { success: true };

    } catch (error) {
      console.error('Erro ao confirmar entrevista:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Remarcar entrevista
  private async remarcarEntrevista(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar candidato
      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      // Enviar mensagem solicitando nova data
      const mensagem = `Ol√° ${candidato.nome}!

Entendemos que voc√™ precisa remarcar sua entrevista. 

Por favor, informe sua disponibilidade para os pr√≥ximos dias:
- Segunda a sexta: 9h √†s 18h
- S√°bado: 9h √†s 12h

Responda com sua prefer√™ncia de data e hor√°rio, e entraremos em contato para confirmar.

Obrigado!`;

      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'solicitacao_remarcacao'
        });
      }

      return { success: true };

    } catch (error) {
      console.error('Erro ao solicitar remarca√ß√£o:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Falar com RH
  private async falarComRH(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar candidato e empresa
      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      const [empresa] = await db
        .select()
        .from(empresas)
        .where(eq(empresas.id, candidato.empresaId));

      // Buscar recrutador respons√°vel
      const [recrutador] = await db
        .select()
        .from(usuarios)
        .where(
          and(
            eq(usuarios.empresaId, candidato.empresaId),
            eq(usuarios.perfil, 'recrutador'),
            eq(usuarios.ativo, 1)
          )
        );

      // Enviar mensagem de confirma√ß√£o
      const mensagem = `Ol√° ${candidato.nome}!

Sua solicita√ß√£o para falar com o RH foi registrada.

Em breve um recrutador da ${empresa.nome} entrar√° em contato com voc√™.

Obrigado pela paci√™ncia!`;

      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'solicitacao_rh'
        });
      }

      // Notificar recrutador (implementar conforme necess√°rio)
      if (recrutador) {
        console.log(`Notificar recrutador ${recrutador.nome} sobre solicita√ß√£o do candidato ${candidato.nome}`);
      }

      return { success: true };

    } catch (error) {
      console.error('Erro ao processar solicita√ß√£o de RH:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Solicitar documentos
  private async solicitarDocumentos(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar candidato
      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      const mensagem = `Ol√° ${candidato.nome}!

Para dar continuidade ao seu processo seletivo, precisamos dos seguintes documentos:

üìã Documentos necess√°rios:
‚Ä¢ RG e CPF
‚Ä¢ Comprovante de resid√™ncia
‚Ä¢ Certificado de reservista (se aplic√°vel)
‚Ä¢ Comprovante de escolaridade
‚Ä¢ Certifica√ß√µes profissionais (se houver)

Por favor, envie os documentos em formato PDF ou imagem.

Em caso de d√∫vidas, entre em contato conosco.

Obrigado!`;

      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'solicitacao_documentos'
        });
      }

      return { success: true };

    } catch (error) {
      console.error('Erro ao solicitar documentos:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Enviar link da vaga
  private async enviarLinkVaga(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar vaga do candidato
      const vagaCandidatosResult = await db
        .select()
        .from(vagaCandidatos)
        .where(eq(vagaCandidatos.candidatoId, candidatoId));
      
      const vagaCandidato = vagaCandidatosResult[0];

      if (!vagaCandidato) {
        return { success: false, error: 'Candidato n√£o est√° inscrito em nenhuma vaga' };
      }

      const [vaga] = await db
        .select()
        .from(vagas)
        .where(eq(vagas.id, vagaCandidato.vagaId));

      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      const linkVaga = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/vagas/${vaga.id}`;

      const mensagem = `Ol√° ${candidato.nome}!

Aqui est√° o link da vaga "${vaga.titulo}":

üîó ${linkVaga}

Acesse para ver mais detalhes sobre a vaga e acompanhar seu processo seletivo.

Obrigado!`;

      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'link_vaga'
        });
      }

      return { success: true };

    } catch (error) {
      console.error('Erro ao enviar link da vaga:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Aprovar candidato
  private async aprovarCandidato(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar candidato
      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      const mensagem = `Parab√©ns ${candidato.nome}! üéâ

Temos uma √≥tima not√≠cia: voc√™ foi APROVADO no processo seletivo!

Em breve nossa equipe entrar√° em contato para discutir os pr√≥ximos passos e detalhes da contrata√ß√£o.

Obrigado por fazer parte do nosso processo seletivo!`;

      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'candidato_aprovado'
        });
      }

      return { success: true };

    } catch (error) {
      console.error('Erro ao aprovar candidato:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Reprovar candidato
  private async reprovarCandidato(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar candidato
      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      const mensagem = `Ol√° ${candidato.nome},

Agradecemos sua participa√ß√£o no nosso processo seletivo.

Infelizmente, n√£o poderemos dar continuidade com sua candidatura neste momento.

Mantenha seu curr√≠culo atualizado, pois novas oportunidades podem surgir.

Desejamos sucesso em sua carreira profissional!

Obrigado!`;

      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'candidato_reprovado'
        });
      }

      return { success: true };

    } catch (error) {
      console.error('Erro ao reprovar candidato:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Mover para pr√≥xima etapa
  private async moverProximaEtapa(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar etapa atual do candidato
      const vagaCandidatosResult = await db
        .select()
        .from(vagaCandidatos)
        .where(eq(vagaCandidatos.candidatoId, candidatoId));
      
      const vagaCandidato = vagaCandidatosResult[0];

      if (!vagaCandidato) {
        return { success: false, error: 'Candidato n√£o est√° inscrito em nenhuma vaga' };
      }

      // Buscar etapas do pipeline
      const etapas = await db
        .select()
        .from(pipelineEtapas)
        .where(eq(pipelineEtapas.vagaId, vagaCandidato.vagaId))
        .orderBy(pipelineEtapas.ordem);

      // Encontrar pr√≥xima etapa
      const etapaAtual = etapas.find(e => e.id === vagaCandidato.etapa);
      const proximaEtapa = etapas.find(e => e.ordem === (etapaAtual?.ordem || 0) + 1);

      if (!proximaEtapa) {
        return { success: false, error: 'N√£o h√° pr√≥xima etapa dispon√≠vel' };
      }

      // Atualizar etapa do candidato
      await db
        .update(vagaCandidatos)
        .set({ 
          etapa: proximaEtapa.nome,
          dataMovimentacao: new Date()
        })
        .where(eq(vagaCandidatos.id, vagaCandidato.id));

      // Buscar candidato
      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      const mensagem = `Ol√° ${candidato.nome}!

Excelente not√≠cia: voc√™ avan√ßou para a pr√≥xima etapa do processo seletivo!

üéØ Nova etapa: ${proximaEtapa.nome}

Em breve voc√™ receber√° mais informa√ß√µes sobre esta etapa.

Parab√©ns e boa sorte!`;

      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'mudanca_etapa'
        });
      }

      return { success: true };

    } catch (error) {
      console.error('Erro ao mover para pr√≥xima etapa:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Agendar entrevista
  private async agendarEntrevista(candidatoId: string): Promise<{ success: boolean; error?: string }> {
    try {
      // Buscar candidato
      const [candidato] = await db
        .select()
        .from(candidatos)
        .where(eq(candidatos.id, candidatoId));

      const mensagem = `Ol√° ${candidato.nome}!

Gostar√≠amos de agendar uma entrevista com voc√™.

Por favor, informe sua disponibilidade para os pr√≥ximos dias:
- Segunda a sexta: 9h √†s 18h
- S√°bado: 9h √†s 12h

Responda com sua prefer√™ncia de data e hor√°rio, e entraremos em contato para confirmar.

Obrigado!`;

      const sessaoId = await this.obterSessaoPadrao(candidato.empresaId);
      
      if (sessaoId) {
        await whatsappService.enviarMensagem({
          sessaoId,
          candidatoId,
          mensagem,
          evento: 'solicitacao_agendamento'
        });
      }

      return { success: true };

    } catch (error) {
      console.error('Erro ao solicitar agendamento:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erro desconhecido' 
      };
    }
  }

  // Obter sess√£o padr√£o da empresa
  private async obterSessaoPadrao(empresaId: string): Promise<string | null> {
    try {
      // Buscar primeira sess√£o ativa da empresa
      const { whatsappSessoes } = await import('@shared/schema');
      const sessoes = await db
        .select()
        .from(whatsappSessoes)
        .where(
          and(
            eq(whatsappSessoes.empresaId, empresaId),
            eq(whatsappSessoes.status, 'conectado')
          )
        );
      
      const sessao = sessoes[0];
      return sessao?.id || null;
    } catch (error) {
      console.error('Erro ao obter sess√£o padr√£o:', error);
      return null;
    }
  }
}