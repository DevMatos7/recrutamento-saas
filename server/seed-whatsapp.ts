import { db } from './db';
import {
  whatsappSessoes,
  templatesMensagem,
  respostasRapidas,
  configuracoesHorario,
  intencoesChatbot,
  empresas
} from '@shared/schema';

async function seedWhatsApp() {
  console.log('üå± Iniciando seed do m√≥dulo WhatsApp...');

  try {
    // Verificar se j√° existe dados do WhatsApp
    const sessoesExistentes = await db.select().from(whatsappSessoes);
    if (sessoesExistentes.length > 0) {
      console.log('üì± Dados do WhatsApp j√° existem, pulando seed...');
      return;
    }

    // Buscar primeira empresa para usar como refer√™ncia
    const [empresa] = await db.select().from(empresas);
    
    if (!empresa) {
      console.log('‚ùå Nenhuma empresa encontrada. Execute o seed principal primeiro.');
      return;
    }

    // 1. Criar sess√£o WhatsApp de exemplo
    console.log('üì± Criando sess√£o WhatsApp...');
    const [sessao] = await db.insert(whatsappSessoes).values({
      empresaId: empresa.id,
      nome: 'Sess√£o Principal',
      numero: '', // Campo vazio para ser preenchido pelo usu√°rio
      status: 'desconectado'
    }).returning();

    console.log(`‚úÖ Sess√£o criada: ${sessao.nome}`);

    // 2. Criar templates de mensagem
    console.log('üìù Criando templates de mensagem...');
    const templates = [
      {
        empresaId: empresa.id,
        titulo: 'Triagem Aprovada',
        evento: 'triagem_aprovada',
        corpo: 'Ol√° {{nome}}! Sua candidatura para a vaga {{vaga}} foi aprovada na triagem inicial. Em breve entraremos em contato para as pr√≥ximas etapas do processo seletivo. Parab√©ns!'
      },
      {
        empresaId: empresa.id,
        titulo: 'Entrevista Agendada',
        evento: 'entrevista_agendada',
        corpo: 'Ol√° {{nome}}! Sua entrevista para a vaga {{vaga}} foi agendada para {{data}} √†s {{hora}} no {{local}}. Por favor, confirme sua presen√ßa respondendo esta mensagem.'
      },
      {
        empresaId: empresa.id,
        titulo: 'Solicita√ß√£o de Documentos',
        evento: 'solicitacao_documentos',
        corpo: 'Ol√° {{nome}}! Para dar continuidade ao seu processo seletivo, precisamos dos seguintes documentos: RG, CPF, comprovante de resid√™ncia e certificado de reservista (se aplic√°vel). Por favor, envie os documentos em formato PDF ou imagem.'
      },
      {
        empresaId: empresa.id,
        titulo: 'Candidato Aprovado',
        evento: 'candidato_aprovado',
        corpo: 'Parab√©ns {{nome}}! üéâ Voc√™ foi APROVADO no processo seletivo para a vaga {{vaga}}! Em breve nossa equipe entrar√° em contato para discutir os pr√≥ximos passos e detalhes da contrata√ß√£o. Obrigado por fazer parte do nosso processo seletivo!'
      },
      {
        empresaId: empresa.id,
        titulo: 'Candidato Reprovado',
        evento: 'candidato_reprovado',
        corpo: 'Ol√° {{nome}}, agradecemos sua participa√ß√£o no nosso processo seletivo para a vaga {{vaga}}. Infelizmente, n√£o poderemos dar continuidade com sua candidatura neste momento. Mantenha seu curr√≠culo atualizado, pois novas oportunidades podem surgir. Desejamos sucesso em sua carreira profissional!'
      },
      {
        empresaId: empresa.id,
        titulo: 'Link da Vaga',
        evento: 'link_vaga',
        corpo: 'Ol√° {{nome}}! Aqui est√° o link da vaga {{vaga}}: {{link}}. Acesse para ver mais detalhes sobre a vaga e acompanhar seu processo seletivo. Obrigado!'
      }
    ];

    for (const template of templates) {
      await db.insert(templatesMensagem).values(template);
    }

    console.log(`‚úÖ ${templates.length} templates criados`);

    // 3. Criar respostas r√°pidas
    console.log('‚ö° Criando respostas r√°pidas...');
    const respostas = [
      {
        empresaId: empresa.id,
        evento: 'entrevista_agendada',
        opcao: '1',
        texto: 'Confirmar entrevista',
        acao: 'confirmar_entrevista'
      },
      {
        empresaId: empresa.id,
        evento: 'entrevista_agendada',
        opcao: '2',
        texto: 'Remarcar entrevista',
        acao: 'remarcar_entrevista'
      },
      {
        empresaId: empresa.id,
        evento: 'entrevista_agendada',
        opcao: '3',
        texto: 'Falar com RH',
        acao: 'falar_com_rh'
      },
      {
        empresaId: empresa.id,
        evento: 'solicitacao_documentos',
        opcao: '1',
        texto: 'Enviar documentos',
        acao: 'solicitar_documentos'
      },
      {
        empresaId: empresa.id,
        evento: 'solicitacao_documentos',
        opcao: '2',
        texto: 'Falar com RH',
        acao: 'falar_com_rh'
      },
      {
        empresaId: empresa.id,
        evento: 'link_vaga',
        opcao: '1',
        texto: 'Ver detalhes da vaga',
        acao: 'enviar_link_vaga'
      },
      {
        empresaId: empresa.id,
        evento: 'link_vaga',
        opcao: '2',
        texto: 'Falar com RH',
        acao: 'falar_com_rh'
      }
    ];

    for (const resposta of respostas) {
      await db.insert(respostasRapidas).values(resposta);
    }

    console.log(`‚úÖ ${respostas.length} respostas r√°pidas criadas`);

    // 4. Criar configura√ß√µes de hor√°rio
    console.log('üïí Criando configura√ß√µes de hor√°rio...');
    const configuracoes = [
      {
        empresaId: empresa.id,
        evento: 'triagem_aprovada',
        horaInicio: '08:00',
        horaFim: '18:00',
        diasSemana: [1, 2, 3, 4, 5] // Segunda a sexta
      },
      {
        empresaId: empresa.id,
        evento: 'entrevista_agendada',
        horaInicio: '09:00',
        horaFim: '17:00',
        diasSemana: [1, 2, 3, 4, 5]
      },
      {
        empresaId: empresa.id,
        evento: 'solicitacao_documentos',
        horaInicio: '08:00',
        horaFim: '18:00',
        diasSemana: [1, 2, 3, 4, 5]
      },
      {
        empresaId: empresa.id,
        evento: 'candidato_aprovado',
        horaInicio: '09:00',
        horaFim: '17:00',
        diasSemana: [1, 2, 3, 4, 5]
      },
      {
        empresaId: empresa.id,
        evento: 'candidato_reprovado',
        horaInicio: '09:00',
        horaFim: '17:00',
        diasSemana: [1, 2, 3, 4, 5]
      }
    ];

    for (const config of configuracoes) {
      await db.insert(configuracoesHorario).values(config);
    }

    console.log(`‚úÖ ${configuracoes.length} configura√ß√µes de hor√°rio criadas`);

    // 5. Criar inten√ß√µes do chatbot
    console.log('ü§ñ Criando inten√ß√µes do chatbot...');
    const intencoes = [
      {
        empresaId: empresa.id,
        nome: 'confirmar_entrevista',
        descricao: 'Candidato confirma presen√ßa em entrevista',
        palavrasChave: ['confirmo', 'confirmar', 'sim', 'ok', 'certo', 'beleza', 'blz', 'confirmado'],
        acao: 'confirmar_entrevista'
      },
      {
        empresaId: empresa.id,
        nome: 'remarcar_entrevista',
        descricao: 'Candidato quer remarcar ou adiar entrevista',
        palavrasChave: ['remarcar', 'adiar', 'mudar', 'trocar', 'outro dia', 'outra data', 'n√£o posso', 'n√£o consigo'],
        acao: 'remarcar_entrevista'
      },
      {
        empresaId: empresa.id,
        nome: 'solicitar_documentos',
        descricao: 'Candidato pergunta sobre documentos',
        palavrasChave: ['documento', 'documentos', 'rg', 'cpf', 'comprovante', 'certificado', 'diploma'],
        acao: 'solicitar_documentos'
      },
      {
        empresaId: empresa.id,
        nome: 'falar_com_rh',
        descricao: 'Candidato quer falar com algu√©m do RH',
        palavrasChave: ['falar', 'conversar', 'contato', 'telefone', 'email', 'atendimento', 'ajuda'],
        acao: 'falar_com_rh'
      },
      {
        empresaId: empresa.id,
        nome: 'enviar_link_vaga',
        descricao: 'Candidato pede link da vaga',
        palavrasChave: ['link', 'vaga', 'descri√ß√£o', 'detalhes', 'mais informa√ß√µes'],
        acao: 'enviar_link_vaga'
      },
      {
        empresaId: empresa.id,
        nome: 'agendar_entrevista',
        descricao: 'Candidato quer agendar entrevista',
        palavrasChave: ['agendar', 'marcar', 'entrevista', 'reuni√£o', 'encontro'],
        acao: 'agendar_entrevista'
      },
      {
        empresaId: empresa.id,
        nome: 'duvida_processo',
        descricao: 'Candidato tem d√∫vidas sobre o processo',
        palavrasChave: ['d√∫vida', 'duvida', 'como', 'quando', 'onde', 'o que', 'qual'],
        acao: 'falar_com_rh'
      },
      {
        empresaId: empresa.id,
        nome: 'desistir_processo',
        descricao: 'Candidato quer desistir do processo',
        palavrasChave: ['desistir', 'cancelar', 'n√£o quero', 'n√£o vou', 'desculpe'],
        acao: 'falar_com_rh'
      },
      {
        empresaId: empresa.id,
        nome: 'agradecer',
        descricao: 'Candidato agradece',
        palavrasChave: ['obrigado', 'obrigada', 'valeu', 'agrade√ßo', 'thanks'],
        acao: 'falar_com_rh'
      },
      {
        empresaId: empresa.id,
        nome: 'saudacao',
        descricao: 'Candidato faz sauda√ß√£o',
        palavrasChave: ['oi', 'ol√°', 'ola', 'bom dia', 'boa tarde', 'boa noite', 'hi', 'hello'],
        acao: 'falar_com_rh'
      }
    ];

    for (const intencao of intencoes) {
      await db.insert(intencoesChatbot).values(intencao);
    }

    console.log(`‚úÖ ${intencoes.length} inten√ß√µes do chatbot criadas`);

    console.log('üéâ Seed do m√≥dulo WhatsApp conclu√≠do com sucesso!');
    console.log('');
    console.log('üìã Resumo do que foi criado:');
    console.log(`   ‚Ä¢ 1 sess√£o WhatsApp: ${sessao.nome}`);
    console.log(`   ‚Ä¢ ${templates.length} templates de mensagem`);
    console.log(`   ‚Ä¢ ${respostas.length} respostas r√°pidas`);
    console.log(`   ‚Ä¢ ${configuracoes.length} configura√ß√µes de hor√°rio`);
    console.log(`   ‚Ä¢ ${intencoes.length} inten√ß√µes do chatbot`);
    console.log('');
    console.log('üöÄ Para come√ßar a usar:');
    console.log('   1. Conecte a sess√£o WhatsApp via QR Code');
    console.log('   2. Configure os templates conforme necess√°rio');
    console.log('   3. Teste o envio de mensagens');
    console.log('   4. Monitore as estat√≠sticas no dashboard');

  } catch (error) {
    console.error('‚ùå Erro durante o seed do WhatsApp:', error);
    throw error;
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  seedWhatsApp()
    .then(() => {
      console.log('‚úÖ Seed conclu√≠do');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro no seed:', error);
      process.exit(1);
    });
}

export { seedWhatsApp };